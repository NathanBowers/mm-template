////////////////////////////////////////
// GULP INIT
////////////////////////////////////////
var gulp = require('gulp');

var del = require('del');
var sass = require('gulp-sass');
var concat = require('gulp-concat');
var sourcemaps = require('gulp-sourcemaps');
var autoprefixer = require('gulp-autoprefixer');
var cssmin = require('gulp-cssmin');
var rename = require('gulp-rename');
var browserSync = require('browser-sync').create();
var runSequence = require('run-sequence');
var open = require('gulp-open');
var touch = require('gulp-touch');
var svgSprite = require('gulp-svg-sprite');
var plumber = require('gulp-plumber');

var autoprefixerOptions = {
	browsers: ['last 2 versions', '> 5%']
};

////////////////////////////////////////
// DEFAULT GULP BUILD TASK, RUNS WHEN "MIDDLEMAN" COMMAND RUNS IN TERMINAL
////////////////////////////////////////
gulp.task('default', function(callback) {
<<<<<<< HEAD
	runSequence('clean:cleanBuild', 'svgSprite', 'sass', 'scripts', ['watch'], callback);
=======
	runSequence('clean:cleanBuild', 'svgSprite', 'sass', 'scripts', 'copyFonts', 'copyBitmaps', ['watch'], callback);
>>>>>>> release
});

////////////////////////////////////////
// "STATIC BUILD" GULP BUILD TASK, RUNS WHEN "MIDDLEMAN BUILD" COMMAND RUNS IN TERMINAL
////////////////////////////////////////
gulp.task('buildProd', function(callback) {
	runSequence('clean:cleanBuild', 'svgSprite', 'sass', 'scripts', callback);
});

////////////////////////////////////////
// GULP TASKS BELOW
////////////////////////////////////////
gulp.task('clean:cleanBuild', function () {			// <-- Used at gulp startup to delete folders and files generated by previous gulp instances
	return del([
		'source/dist/**', 'source/sass/sprites/**'	// <-- More files you could clean: 'data/temp.json', 'source/javascripts/application.js'
	]);
});

gulp.task('scripts', function() {		// <-- This blog concatenates .js files and put them in 'dist'
	return gulp.src([
		'source/js/*.js'
	])
	.pipe(concat('all.js'))
	.pipe(gulp.dest('source/dist/js/'));
});

gulp.task('sass', function() {
	return gulp
	.src('source/sass/**/*.+(scss|sass)')		// <-- Gets all files ending with .sass or .scss in app/scss and children dirs
	.pipe(sourcemaps.init())					// <-- Enables sourcemap for later output
	.pipe(sass().on('error', sass.logError)) 	// <-- Make sure to use sass.logError so gulp.js 'watch' task doesn't die when there's a Sass build error.
	.pipe(autoprefixer(autoprefixerOptions))	// <-- Autoprefix the resultant .css
	.pipe(cssmin()) 							// <-- Minify .css
	.pipe(rename({suffix: '.min'})) 			// <-- Rename minified file to .min.css
	.pipe(sourcemaps.write('maps/'))			// <-- Turn on .css source map
	.pipe(gulp.dest('source/dist/css/'));		// <-- Output the completed .css file
<<<<<<< HEAD
=======
});

gulp.task('copyFonts', function() {
	gulp.src('source/fonts/**/*.{ttf,woff,eof}')
	.pipe(gulp.dest('./source/dist/fonts/'));
});

gulp.task('copyBitmaps', function() {
	gulp.src('source/images/**/*.{png,jpg,jpeg,gif}')
	.pipe(gulp.dest('./source/dist/images/'));
>>>>>>> release
});

gulp.task('touchConfig', function() {
	gulp.src('config.rb').pipe(touch()); 		// <-- Touch config.rb on gulpfile.js save so Middleman reloads everything.
});

gulp.task('svgSprite', function() {
	baseDir	  = 'source/images/',	// <-- Set to your SVG base directory
	svgGlob	  = '**/*.svg',	   					// <-- Glob to match your SVG files
	// outDir	   = './source/sass/sprites',		// <-- Main output directory
	outDir	   = './source/dist/images',
	config	   = {
		dest: '.',
		mode: {
			view: {													// <-- Use "view" mode for "css" svg sprites that can be used as inline images also.
				dest: '.',
				sprite: '../images/global-sprite.svg',				// <-- Paths are tricky
				bust: false,										// <-- Turn off Cache busting
				layout: 'packed',									// <-- Pack the svg shapes tightly spaced in the sprite
				example: true,										// <-- Render out a sample .html file to /source/sass/sprites/ showing the sprites
				render: {
					scss: {
						dest: '../../sass/sprites/_svg-sprite.scss'					// <-- Output the scss file that will be imported into the main sass
					}
				}
			},
			symbol: {
				layout: 'packed',
				example: true
			}
		}
	};

	return gulp.src(svgGlob, {cwd: baseDir})
		.pipe(plumber())
		.pipe(svgSprite(config)).on('error', function(error){ console.log(error); })	// <-- Plumber error handler, everyone says so
		.pipe(gulp.dest(outDir))														// <-- Output the files
});


////////////////////////////////////////
// BrowserSync lives inside the watch task. Much better this way because of css watch/browsersync reload concurrency issues. See below
////////////////////////////////////////
gulp.task('watch', ['sass'], function(gulpCallback) {
	// Changed browserSync and watch function based on http://paulsalaets.com/posts/injecting-styles-in-page-with-browser-sync
	// Now it's much better. No Sass/CSS watch task concurrency problems with BrowserSync/Gulp/Middleman.
	// Streamed .css and image files (aka live reloading) should now just work, no "double save" needed.
	browserSync.init({
		proxy: "localhost:4567",	// <-- Proxy local running Middleman server.
		open: false, 				// <-- Launch default browser on BrowserSync init.
		reloadDelay: 100,			// <-- Seems to help, concurrency Voodoo. Probably.
		reloadDebounce: 500,		// <-- Seems to help, concurrency Voodoo. Probably.
		reloadOnRestart: true,
<<<<<<< HEAD
		files: ["source/dist/css/*.css", "source/dist/js/*.js", "source/dist/**/*.svg", "source/**/*.erb", "source/**/*.slim", "source/**/*.html"], // Use BrowserSync instead of gulp watchers to watch static files.
=======
		files: ["source/**/*.erb", "source/**/*.slim", "source/**/*.html", "source/dist/css/*.css", "source/dist/js/*.js", "source/dist/**/*.+(svg|jpg|jpeg|png|gif|ttf|woff|eof)", "!static-build-output/**/*.*"], // Use BrowserSync instead of gulp watchers to watch static files.
>>>>>>> release
		port: 7000,			// <-- The port the BrowserSync proxy runs on.
		ui: {
			port: 7001		// <-- Port that BrowserSync UI tools runs on.
		},
	}, function callback() {
		// (server is now up)
<<<<<<< HEAD
		gulp.watch('config.rb', browserSync.exit); 				// <-- Exit BrowserSync on config.rb change
		gulp.watch('source/sass/**/*.+(scss|sass)', ['sass']);	// <-- Watch Sass/Scss
		gulp.watch('source/js/*.js', ['scripts']);				// <-- Watch js
		gulp.watch('source/images/**/*.svg', ['svgSprite']);	// <-- Watch svg
		gulp.watch('gulpfile.js', ['touchConfig']);				// <-- "Touch" config.rb on gulpfile.js save so Middleman reloads
=======
		gulp.watch('config.rb', browserSync.exit); 									// <-- Exit BrowserSync on config.rb change
		gulp.watch('source/sass/**/*.+(scss|sass)', ['sass']);						// <-- Watch Sass/Scss
		gulp.watch('source/js/*.js', ['scripts']);									// <-- Watch js
		gulp.watch('source/images/**/*.svg', ['svgSprite']);						// <-- Watch svg
		gulp.watch('source/images/**/*.+(jpg|jpeg|png|gif)', ['copyBitmaps']);		// <-- Watch png, jpg, gif
		gulp.watch('source/fonts/**/*.+(ttf|woff|eof)', ['copyFonts']);				// <-- Watch fonts
		gulp.watch('gulpfile.js', ['touchConfig']);									// <-- "Touch" config.rb on gulpfile.js save so Middleman reloads
>>>>>>> release

		gulpCallback(); // <-- Notify gulp that this task is done
	});
});
